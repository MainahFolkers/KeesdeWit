from random import *

# ------------------------------------------------------------
# FROM NOW ON: 'AA' MEANS 'AMINO ACID' 
# ------------------------------------------------------------ 

# should this be a function in the Protein class??
# then everything that says "protein dot method" will be "self dot method"

# should this function be called something like 'randomly_fold'
# --> since we fold from the beginning every time this function is called

def fold(protein):

    ### just info: list of directions: method of class Protein (number of directions is 1 less than number of AAs)
    # protein.directions = ['' for i in range(protein.n - 1)]

    ### just info: list of lists of coordinates: method of class protein
    # protein.coordinates = [[] for i in range(protein.n)]
    
    ## 1st AA starts on (x = 0, y = 0)
    x = 0
    y = 0

    ## 1st AA's coordinates in list
    protein.coordinates[0] = [x, y]

    ## 1st direction always to the right
    protein.directions[0] = 'r'

    ## direction 'right' means y-coordinate doesn't change; and x = x + 1 
    x = x + 1

    ## 2nd AA's coordinate placed in coordinate list (variable 'y' still 0)
    protein.coordinates[1] = [x, y]    

    # 2nd direction can only be 'up' or 'right' (symmetry pruning)
    direcs = ['r', 'u']
    # choose randomly to go 'up' or 'right'
    direc = choice(direcs)
    # put 2nd direction in list
    protein.directions[1] = direc

    # calculate coordinate of 3rd AA depending on the chosen direction
    protein.coordinates[2] = protein.bend(direc, x, y)
    # bend() returns [x, y] --> set current x and y to those values
    x = protein.coordinates[2][0]
    y = protein.coordinates[2][1]

    # ------------------------------------------------------------------------
    # UNPRUNED FOLDING STARTS FROM 4th AMINO ACID (AA) --> SO 3rd DIRECTION
    # ------------------------------------------------------------------------

    # fourth amino acid and up: random folding
    aminoIndex = 3

    # all possible directions (right, down, left, up)
    allDirecs = ['r', 'd', 'l', 'u']

    # 2nd direction is most recently chosen before entering the loop
    chosenDirec = protein.directions[1]

    while aminoIndex < protein.n:

        # available directions to choose from in current iteration
        availDirecs = allDirecs
        availDirecs.remove(chosenDirec)

        # while there are still directions available to choose
        while availDirecs:

            # random choice 1 of 3 available directions
            chosenDirec = choice(availDirecs)

            # i - 1 is index of bond
            protein.directions[aminoIndex - 1] = chosenDirec

            # sample without replacement, remove chosen direction from options
            availDirecs.remove(chosenDirec)

            # calculate new coordinates
            [nx, ny] = protein.bend(protein.directions[aminoIndex], x, y)

            # if the current new coordinate is not yet occupied by other amino acid
            if [nx, ny] not in protein.coordinates:
                # update old x and y
                [x, y] = [nx, ny]
                # new coordinates are safed
                protein.coordinates[aminoIndex] = [nx, ny]

                # continue with next amino acid
                aminoIndex += 1
                break

            # if folding is invalid
            elif [nx, ny] in self.coordinates:
                return None

        # if there are no directions left to choose from
        if not availDirecs:
            return None

    # as usual, return class Protein :)        
    return protein
